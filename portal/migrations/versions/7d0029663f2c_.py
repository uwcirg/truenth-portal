"""empty message

Revision ID: 7d0029663f2c
Revises: 4f5daa2b48db
Create Date: 2025-03-17 14:43:18.531035

"""
import re
from alembic import op
from datetime import datetime, timedelta
from sqlalchemy import text

from portal.database import db
from portal.models.adherence_data import AdherenceData
from portal.models.reporting import single_patient_adherence_data
from portal.models.research_study import EMPRO_RS_ID
from portal.timeout_lock import ADHERENCE_DATA_KEY, CacheModeration

# revision identifiers, used by Alembic.
revision = '7d0029663f2c'
down_revision = '4f5daa2b48db'


def upgrade():
    conn = op.get_bind()
    patient_adherence_months = {}
    patient_ts_months = {}
    now = datetime.utcnow()
    reprocess_ids = []
    def patient_loop():
        query = "select distinct(user_id) from trigger_states order by user_id"
        for row in conn.execute(query):
            pat_id = row.user_id
            patient_adherence_months[pat_id] = adherence_months_by_patient(pat_id)
            patient_ts_months[pat_id] = trigger_states_months_by_patient(pat_id)

            if patient_adherence_months[pat_id] != patient_ts_months[pat_id]:
                print("Differences for ", pat_id, "adherence months < -- > trigger states months")
                print("  ", patient_adherence_months[pat_id], "!=", patient_ts_months[pat_id])
                reprocess_ids.append(pat_id)


    def adherence_months_by_patient(patient_id):
        this_patient_months = set()
        query = text(
            "select rs_id_visit from adherence_data where patient_id = "
            ":patient_id and rs_id_visit like :rs1_pattern")
        for row in conn.execute(query, {"patient_id": patient_id, "rs1_pattern": "1:Month%"}):
            match = re.findall(r'\d+', row.rs_id_visit)
            if not match:
                raise ValueError(f"Patient {patient_id} has bogus rs_id_visit value: {r2.rs_id_visit}")
            this_patient_months.add(int(match[-1]))
        return this_patient_months

    def trigger_states_months_by_patient(patient_id):
        this_patient_ts_months = set()
        query = text(
            "select distinct(visit_month) from trigger_states where user_id = :patient_id"
        )
        # trigger states visit month 0 index - add 1
        for row in conn.execute(query, {"patient_id":patient_id}):
            this_patient_ts_months.add(row.visit_month + 1)
        return this_patient_ts_months

    patient_loop()
    for pat_id in reprocess_ids:
        # force a rebuild of adherence data, see if results improve
        cache_moderation = CacheModeration(key=ADHERENCE_DATA_KEY.format(
            patient_id=pat_id,
            research_study_id=EMPRO_RS_ID))
        cache_moderation.reset()
        valid = (now + timedelta(hours=1))
        AdherenceData.query.filter(AdherenceData.valid_till < valid).delete()
        db.session.commit()
        single_patient_adherence_data(patient_id=pat_id, research_study_id=EMPRO_RS_ID)
        second_try = adherence_months_by_patient(pat_id)
        if second_try != patient_adherence_months[pat_id]:
            print(pat_id, " got better!")
            print(patient_adherence_months[pat_id], " -> ", second_try, " : ", patient_ts_months[pat_id])
    #ad_only, ts_only, mods, _ = dict_compare(adherence_months, ts_months)
    #print(ad_only)
    raise NotImplemented("Not implemented yet")

def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###
