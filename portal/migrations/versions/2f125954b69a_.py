"""Remove duplicate QuestionnaireResponse POSTs

Revision ID: 2f125954b69a
Revises: 17060aa3c9d6
Create Date: 2023-02-16 17:23:16.570378

"""
from alembic import op
from io import StringIO
from sqlalchemy.sql import text
from sqlalchemy.orm import sessionmaker

from portal.dict_tools import dict_compare
from portal.models.audit import Audit

# revision identifiers, used by Alembic.
revision = '2f125954b69a'
down_revision = '17060aa3c9d6'


def upgrade():
    purge_ids = set()
    audits = []

    def purge_newer_of(id1, id2, subject_id):
        if id1 in purge_ids:
            raise ValueError(f"{id1} already in purge list")
        if id2 in purge_ids:
            raise ValueError(f"{id2} already in purge list")
        purge_ids.add(max(id1, id2))
        audits.append(Audit(
            user_id=subject_id,
            subject_id=subject_id,
            context='assessment',
            comment=f"Deleting QNR {max(id1, id2)} in favor of "
                    f"{min(id1, id2)}; see TN-3140",
        ))

    # ### commands auto generated by Alembic - please adjust! ###
    def compare_docs(left_id, left_doc, right_id, right_doc, subject_id):
        added, removed, modified, same = dict_compare(left_doc, right_doc)
        if not any((added, removed, modified)):
            print(f"identical QNR.documents: {msg.getvalue()} QNR({left_id}), QNR({right_id})")
            purge_newer_of(left_id, right_id, subject_id)
        else:
            if added:
                assert added == {'extension'}
                assert left_doc['extension'][0]['url'] == 'http://us.truenth.org/identity-codes/actual-completion-date'
                print(f"{msg.getvalue()} QNR({left_id}) added 'actual-completion-date'")
            if removed:
                raise ValueError(f"unexpected: QNR removed {removed}")
            if modified:
                # If the only mod is a difference of AE session IDs,
                # consider identical
                if (set(modified.keys()) == set(['identifier']) and
                        modified['identifier'][0]['label'] == 'cPRO survey session ID'):
                    print(f"identical excluding AE session: {msg.getvalue()} QNR({left_id}), QNR({right_id})")
                    purge_newer_of(left_id, right_id, subject_id)
                elif set(modified.keys()) == set(('identifier', 'author')):
                    print(f"identical excluding AE session and author: {msg.getvalue()} QNR({left_id}), QNR({right_id})")
                    purge_newer_of(left_id, right_id, subject_id)
                elif set(modified.keys()) == set(('identifier', 'authored')):
                    print(
                        f"identical excluding AE session and authored: {msg.getvalue()} QNR({left_id}), QNR({right_id})")
                    purge_newer_of(left_id, right_id, subject_id)
                else:
                    differences.write(f"\n{msg.getvalue()}")
                    # run detailed diff on respective groups
                    differences.write(f" detailed differences between QNR({left_id}), QNR({right_id}):\n")
                    for i in range(len(left_doc['group']['question'])):
                        added, removed, modified, same = dict_compare(
                            left_doc['group']['question'][i],
                            right_doc['group']['question'][i])
                        assert not added
                        assert not removed
                        if modified:
                            if set(modified.keys()) == set(['text']):
                                # Typos correct in Questionnaires, not significant
                                squelch = (
                                    f"identical excluding question text "
                                    f"<{modified['text'][0]}> vs <{modified['text'][1]}")
                                continue
                            question_label = left_doc['group']['question'][i]['linkId']
                            differences.write(f"QNR({left_id}).{question_label}: ")
                            if set(modified.keys()) not in (set(['answer']), set(['answer', 'text'])):
                                raise ValueError(f"unexpected: {modified.keys()}")
                            differences.write(f"  {modified['answer'][0]}\n")
                            differences.write(f"QNR({right_id}).{question_label}: ")
                            differences.write(f"  {modified['answer'][1]}\n")
                    purge_newer_of(left_id, right_id, subject_id)

    conn = op.get_bind()
    result = conn.execute(text(
        "select count(*), subject_id, questionnaire_bank_id as qb_id, "
        "qb_iteration as qb_iter, "
        "document->'questionnaire'->>'reference' as instrument, "
        "value as study_id from questionnaire_responses join "
        "user_identifiers on user_identifiers.user_id = subject_id join "
        "identifiers on user_identifiers.identifier_id = identifiers.id "
        "where questionnaire_bank_id is not null and "
        "questionnaire_bank_id > 0 and status = 'completed'"
        "group by subject_id, study_id, qb_id, qb_iter, instrument "
        "having count(*) > 1 order by subject_id"))

    results = result.fetchall()
    differences = StringIO()
    for r in results:
        if r['subject_id'] == 2336:
            continue  # bootstrap problems as PR #4304 isn't yet in place

        msg = StringIO()
        msg.write(f"Patient {r['subject_id']} ({r['study_id']})")
        if r['qb_iter'] is None:
            msg.write(f", qb_id({r['qb_id']}) {r['instrument'][46:]}")
            r2 = conn.execute(text(
                "select id, document from questionnaire_responses where "
                "subject_id=:subject_id and questionnaire_bank_id=:qb_id "
                "and qb_iteration is null and "
                "document->'questionnaire'->>'reference'=:instrument order by id"),
                subject_id=r['subject_id'],
                qb_id=r['qb_id'],
                instrument=r['instrument'])
        else:
            msg.write(f", qb_id({r['qb_id']}):qb_iteration({r['qb_iter']}) {r['instrument'][46:]}")
            r2 = conn.execute(text(
                "select id, document from questionnaire_responses where "
                "subject_id=:subject_id and questionnaire_bank_id=:qb_id "
                "and qb_iteration=:qb_iter and "
                "document->'questionnaire'->>'reference'=:instrument order by id"),
                subject_id=r['subject_id'],
                qb_id=r['qb_id'],
                qb_iter=r['qb_iter'],
                instrument=r['instrument'])

        docs = {}
        for inner in r2.fetchall():
            docs[inner['id']] = inner['document']

        # Run pairwise comparisons
        keys = list(docs.keys())
        left_id = keys.pop()
        left_doc = docs[left_id]
        while keys:
            right_id = keys.pop()
            right_doc = docs[right_id]
            compare_docs(left_id, left_doc, right_id, right_doc, subject_id=r['subject_id'])
            left_id = right_id

    print(differences.getvalue())
    if purge_ids:
        print(f"purging duplicates: {purge_ids}")
        if len(purge_ids) > 1:
            conn.execute(f"delete from questionnaire_responses where id in {tuple(purge_ids)}")
        else:
            conn.execute(f"delete from questionnaire_responses where id = {purge_ids.pop()}")
    Session = sessionmaker()
    session = Session(bind=op.get_bind())
    for audit in audits:
        session.add(audit)
    session.commit()


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###
