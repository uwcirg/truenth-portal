# docker-compose production overrides
---
version: "3.4"
services:
  web:
    restart: unless-stopped
    environment:
      # Number of worker processes for handling requests
      # http://docs.gunicorn.org/en/stable/settings.html#workers
      WEB_CONCURRENCY: 5
    # mount a tmpfs to prevent gunicorn from blocking
    # http://docs.gunicorn.org/en/stable/faq.html#blocking-os-fchmod
    volumes:
      - target: /tmp
        type: tmpfs
    healthcheck:
      test: flask healthcheck
      start_period: 2m
      interval: 5m
      timeout: 1m
      retries: 5

  celeryworker:
    restart: unless-stopped
    environment:
      # Number of tasks a celery worker should run before being recreated
      # https://docs.celeryproject.org/en/latest/userguide/configuration.html#std:setting-worker_max_tasks_per_child
      CELERYD_MAX_TASKS_PER_CHILD: 10
    # Set lower CPU priority to prevent blocking web service
    cap_add:
      - SYS_NICE
    command: sh -c '
      flask generate-site-cfg &&
      nice
        celery
          --app portal.celery_worker.celery
        worker
          --loglevel debug
      '

  celeryworkerslow:
    restart: unless-stopped
    environment:
      # Number of tasks a celery worker should run before being recreated
      # https://docs.celeryproject.org/en/latest/userguide/configuration.html#std:setting-worker_max_tasks_per_child
      CELERYD_MAX_TASKS_PER_CHILD: 10
    # Set lower CPU priority to prevent blocking web service
    cap_add:
      - SYS_NICE
    command: sh -c '
      flask generate-site-cfg &&
      nice -n 15
        celery
          --app portal.celery_worker.celery
        worker
          --queues low_priority
          --loglevel debug
      '

  celerybeat:
    restart: unless-stopped

  sdc:
    restart: unless-stopped
    healthcheck:
      test:
        wget --spider --quiet
          http://localhost:5000

  redis:
    restart: unless-stopped

  db:
    restart: unless-stopped
